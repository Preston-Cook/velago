// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  extensions = [uuid_ossp(map: "uuid-ossp")]
  url        = env("AWS_AURORA_CLUSTER_WRITE_URL")
}

enum Role {
  USER
  ORGANIZATION
  ADMIN
}

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()"))
  name          String?
  phone         String?
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  locale        String    @default("en")
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model Account {
  id                String   @id @default(dbgenerated("uuid_generate_v4()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ContactMessages {
  id        String @id @default(dbgenerated("uuid_generate_v4()"))
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String
  phone     String
  message   String

  @@map("contact_messages")
}

model SmsOtp {
  id             String   @id @default(dbgenerated("uuid_generate_v4()"))
  phone          String   @unique
  otpHash        String   @map("otp_hash")
  expirationTime DateTime @map("expiration_time")
  isUsed         Boolean  @default(false) @map("is_used")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("sms_otp")
}

model Organization {
  id                      String                   @id @default(dbgenerated("uuid_generate_v4()"))
  name                    String
  alternateName           String                   @map("alternate_name")
  description             String?
  email                   String?
  website                 String?
  additionalWebsites      URL[]
  yearIncorporated        Int?                     @map("year_incorporated")
  legalStatus             String?                  @map("legal_status")
  logo                    String?
  uri                     String?
  parentOrganization      Organization?            @relation("ParentOrganization", fields: [parentOrganizationId], references: [id])
  parentOrganizationId    String?                  @map("parent_organization_id")
  childOrganizations      Organization[]           @relation("ParentOrganization")
  funding                 Funding[]
  contacts                Contact[]
  phones                  Phone[]
  locations               Location[]
  programs                Program[]
  organizationIdentifiers OrganizationIdentifier[]
  services                Service[]

  @@map("organization")
}

model Service {
  id                     String              @id @default(dbgenerated("uuid_generate_v4()"))
  name                   String
  alternateName          String?             @map("alternate_name")
  description            String?
  url                    String?
  additionalUrls         URL[]
  email                  String?
  status                 StatusType
  interpretationServices String?             @map("interpretation_services")
  applicationProcess     String?             @map("application_process")
  feesDescription        String?             @map("fees_description")
  accreditations         String?
  eligibilityDescription String?             @map("eligibility_description")
  minimumAge             Int?                @map("minimum_age")
  maximumAge             Int?                @map("maximum_age")
  assuredDate            String?             @map("assured_date")
  assurerEmail           String?             @map("assurer_email")
  alert                  String?
  lastModified           DateTime?           @default(now()) @updatedAt @map("last_modified")
  phones                 Phone[]
  schedules              Schedule[]
  serviceAreas           ServiceArea[]
  serviceAtLocations     ServiceAtLocation[]
  languages              Language[]
  organization           Organization?       @relation(fields: [organizationId], references: [id])
  organizationId         String?             @map("organization_id")
  funding                Funding[]
  costOptions            CostOption[]
  program                Program[]
  requiredDocuments      RequiredDocument[]
  contacts               Contact[]
  capacities             ServiceCapacity[]
  category               String?

  @@map("service")
}

model ServiceCapacity {
  id String @id @default(dbgenerated("uuid_generate_v4()"))

  Service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   String?  @map("service_id")
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String   @map("unit_id")
  available   Int
  maximum     Int
  description String
  updated     DateTime @default(now()) @updatedAt

  @@map("service_capacity")
}

model Unit {
  id              String            @id @default(dbgenerated("uuid_generate_v4()"))
  name            String
  scheme          String
  identifier      String
  uri             String
  ServiceCapacity ServiceCapacity[]

  @@map("unit")
}

model URL {
  id             String        @id @default(dbgenerated("uuid_generate_v4()"))
  label          String
  url            String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @map("organization_id")
  Service        Service?      @relation(fields: [serviceId], references: [id])
  serviceId      String?       @map("service_id")

  @@map("url")
}

enum StatusType {
  ACTIVE
  INACTIVE
  DEFUNCT
  TEMPORARILY_CLOSED

  @@map("status_type")
}

model Program {
  id             String        @id @default(dbgenerated("uuid_generate_v4()"))
  organizationId String?       @unique @map("organization_id")
  organization   Organization? @relation(fields: [organizationId], references: [id])
  name           String
  alternateName  String?       @map("alternate_name")
  description    String
  service        Service[]

  @@map("program")
}

model Address {
  id            String        @id @default(dbgenerated("uuid_generate_v4()"))
  locationId    String?       @map("location_id")
  location      Location?     @relation(fields: [locationId], references: [id])
  attention     String?
  address1      String?       @map("address_1")
  address2      String?       @map("address_2")
  city          String?
  region        String?
  stateProvince String?       @map("state_province")
  postalCode    String?       @map("postal_code")
  country       String?
  addressType   LocationType? @map("address_type")

  @@map("address")
}

model Contact {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()"))
  organizationId      String?            @map("organization_id")
  organization        Organization?      @relation(fields: [organizationId], references: [id])
  serviceId           String?            @unique @map("service_id")
  service             Service?           @relation(fields: [serviceId], references: [id])
  serviceAtLocationId String?            @unique @map("service_at_location_id")
  serviceAtLocation   ServiceAtLocation? @relation(fields: [serviceAtLocationId], references: [id])
  locationId          String?            @unique @map("location_id")
  location            Location?          @relation(fields: [locationId], references: [id])
  name                String?
  title               String?
  department          String?
  email               String?
  phones              Phone[]

  @@map("contact")
}

model RequiredDocument {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?  @map("service_id")
  document  String?
  uri       String?

  @@map("required_document")
}

model Location {
  id                     String          @id @default(dbgenerated("uuid_generate_v4()"))
  locationType           LocationType?   @map("location_type")
  url                    String?
  organizationId         String?         @map("organization_id")
  organization           Organization?   @relation(fields: [organizationId], references: [id])
  name                   String?
  alternateName          String?         @map("alternate_name")
  description            String?
  transportation         String?
  latitude               Float
  longitude              Float
  externalIdentifier     String?         @map("external_identifier")
  externalIdentifierType String?         @map("external_identifier_type")
  languages              Language[]
  addresses              Address[]
  contacts               Contact[]
  accessability          Accessability[]
  phones                 Phone[]
  schedules              Schedule[]

  serviceAtLocation ServiceAtLocation[]

  @@map("location")
}

enum LocationType {
  PHYSICAL
  POSTAL
  VIRTUAL

  @@map("location_type")
}

model ServiceAtLocation {
  id           String        @id @default(dbgenerated("uuid_generate_v4()"))
  service      Service?      @relation(fields: [serviceId], references: [id])
  serviceId    String?       @map("service_id")
  description  String?
  serviceAreas ServiceArea[]
  contacts     Contact[]
  phones       Phone[]
  schedules    Schedule[]
  location     Location?     @relation(fields: [locationId], references: [id])
  locationId   String?       @map("location_id")

  @@map("service_at_location")
}

enum PhoneType {
  TEXT
  VOICE
  FAX
  CELL
  VIDEO
  PAGER
}

model Phone {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()"))
  location            Location?          @relation(fields: [locationId], references: [id])
  locationId          String?            @map("location_id")
  service             Service?           @relation(fields: [serviceId], references: [id])
  serviceId           String?            @map("service_id")
  organization        Organization?      @relation(fields: [organizationId], references: [id])
  organizationId      String?            @map("organization_id")
  contact             Contact?           @relation(fields: [contactId], references: [id])
  contactId           String?            @map("contact_id")
  serviceAtLocationId String?            @map("service_at_location_id")
  serviceAtLocation   ServiceAtLocation? @relation(fields: [serviceAtLocationId], references: [id])
  number              String
  extension           Int?
  phoneType           PhoneType?         @map("phone_type")
  description         String?
  languages           Language[]

  @@map("phone")
}

model ServiceArea {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()"))
  service             Service?           @relation(fields: [serviceId], references: [id])
  serviceId           String             @map("service_id")
  name                String?
  description         String?
  extent              String?
  extentType          ExtentType         @map("extent_type")
  uri                 String?
  serviceAtLocation   ServiceAtLocation? @relation(fields: [serviceAtLocationId], references: [id])
  serviceAtLocationId String?            @map("service_at_location_id")

  @@map("service_area")
}

enum ExtentType {
  GEOJSON
  TOPOJSON
  KML
  TEXT

  @@map("extent_type")
}

model CostOption {
  id                String   @id @default(dbgenerated("uuid_generate_v4()"))
  service           Service? @relation(fields: [serviceId], references: [id])
  serviceId         String?  @map("service_id")
  validFrom         String?  @map("valid_from")
  validTo           String?  @map("valid_to")
  option            String
  currency          String?
  amount            Decimal?
  amountDescription String?  @map("amount_description")

  @@map("cost_option")
}

model Accessability {
  id          String    @id @default(dbgenerated("uuid_generate_v4()"))
  locationId  String?   @unique @map("location_id")
  location    Location? @relation(fields: [locationId], references: [id])
  description String?
  details     String?
  url         String?

  @@map("accessability")
}

model Schedule {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()"))
  service             Service?           @relation(fields: [serviceId], references: [id])
  serviceId           String?            @map("service_id")
  location            Location?          @relation(fields: [locationId], references: [id])
  locationId          String?            @map("location_id")
  serviceAtLocation   ServiceAtLocation? @relation(fields: [serviceAtLocationId], references: [id])
  serviceAtLocationId String?            @map("service_at_location_id")
  validFrom           String?            @map("valid_from")
  validTo             String?            @map("valid_to")
  dtstart             String?
  timezone            Int
  until               String?
  count               Int?
  wkst                String?
  freq                String?
  interval            Int?
  byday               String?
  byweekno            String?
  bymonthday          String?
  byyearday           String?
  description         String?
  opensAt             String?            @map("opens_at")
  closesAt            String?            @map("closes_at")
  scheduleLink        String?            @map("schedule_link")
  attendingType       String?            @map("attending_type")
  notes               String?

  @@map("schedule")
}

// TODO:
model Language {
  id         String    @id @default(dbgenerated("uuid_generate_v4()"))
  serviceId  String?   @map("service_id")
  service    Service?  @relation(fields: [serviceId], references: [id])
  locationId String?   @map("location_id")
  location   Location? @relation(fields: [locationId], references: [id])
  phoneId    String?   @map("phone_id")
  phone      Phone?    @relation(fields: [phoneId], references: [id])
  name       String?
  code       String?
  note       String?

  @@map("language")
}

model Funding {
  id             String        @id @default(dbgenerated("uuid_generate_v4()"))
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @unique @map("organization_id")
  serviceId      String?       @unique @map("service_id")
  service        Service?      @relation(fields: [serviceId], references: [id])
  source         String?

  @@map("funding")
}

model OrganizationIdentifier {
  id               String       @id @default(dbgenerated("uuid_generate_v4()"))
  organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   String       @unique @map("organization_id")
  identifierScheme String?      @map("identifier_scheme")
  identifierType   String       @map("identifier_type")
  identifier       String

  @@map("organization_identifier")
}

model Taxonomy {
  id           String        @id @default(dbgenerated("uuid_generate_v4()"))
  name         String
  description  String
  uri          String?
  version      String?
  taxonomyTerm TaxonomyTerm?

  @@map("taxonomy")
}

model TaxonomyTerm {
  id             String      @id @default(dbgenerated("uuid_generate_v4()"))
  code           String?
  name           String
  description    String
  parentId       String?     @map("parent_id")
  taxonomy       String
  taxonomyDetail Taxonomy?   @relation(fields: [taxonomyId], references: [id])
  taxonomyId     String?     @unique @map("taxonomy_id")
  termUri        String?     @map("term_uri")
  attribute      Attribute[]

  @@map("taxonomy_term")
}

model MetaTableDescription {
  id           String @id @default(dbgenerated("uuid_generate_v4()"))
  name         String
  language     String
  characterSet String @map("character_set")

  @@map("meta_table_description")
}

model Attribute {
  id             String       @id @default(dbgenerated("uuid_generate_v4()"))
  linkId         String       @map("link_id")
  linkType       String       @map("link_type")
  value          String
  taxonomyTerm   TaxonomyTerm @relation(fields: [taxonomyTermId], references: [id])
  taxonomyTermId String       @map("taxonomy_term_id")
  label          String

  @@map("attribute")
}

model Metadata {
  id               String @id @default(dbgenerated("uuid_generate_v4()"))
  resourceId       String @map("resource_id")
  resourceType     String @map("resource_type")
  lastActionDate   String @map("last_action_date")
  lastActionType   String @map("last_action_type")
  fieldName        String @map("field_name")
  previousValue    String @map("previous_value")
  replacementValue String @map("replacement_value")
  updatedBy        String @map("updated_by")

  @@map("metadata")
}
